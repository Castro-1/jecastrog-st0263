# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protobufs import service_pb2 as protobufs_dot_service__pb2


class LoginServiceStub(object):
    """LOGIN

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/fileSharing.LoginService/Login',
                request_serializer=protobufs_dot_service__pb2.LoginRequest.SerializeToString,
                response_deserializer=protobufs_dot_service__pb2.LoginResponse.FromString,
                )


class LoginServiceServicer(object):
    """LOGIN

    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=protobufs_dot_service__pb2.LoginRequest.FromString,
                    response_serializer=protobufs_dot_service__pb2.LoginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileSharing.LoginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoginService(object):
    """LOGIN

    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileSharing.LoginService/Login',
            protobufs_dot_service__pb2.LoginRequest.SerializeToString,
            protobufs_dot_service__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LogoutServiceStub(object):
    """LOGOUT

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Logout = channel.unary_unary(
                '/fileSharing.LogoutService/Logout',
                request_serializer=protobufs_dot_service__pb2.LogoutRequest.SerializeToString,
                response_deserializer=protobufs_dot_service__pb2.LogoutResponse.FromString,
                )


class LogoutServiceServicer(object):
    """LOGOUT

    """

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogoutServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=protobufs_dot_service__pb2.LogoutRequest.FromString,
                    response_serializer=protobufs_dot_service__pb2.LogoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileSharing.LogoutService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogoutService(object):
    """LOGOUT

    """

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileSharing.LogoutService/Logout',
            protobufs_dot_service__pb2.LogoutRequest.SerializeToString,
            protobufs_dot_service__pb2.LogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TransferServiceStub(object):
    """TRANSFER

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transfer = channel.unary_unary(
                '/fileSharing.TransferService/Transfer',
                request_serializer=protobufs_dot_service__pb2.TransferRequest.SerializeToString,
                response_deserializer=protobufs_dot_service__pb2.TransferResponse.FromString,
                )


class TransferServiceServicer(object):
    """TRANSFER

    """

    def Transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=protobufs_dot_service__pb2.TransferRequest.FromString,
                    response_serializer=protobufs_dot_service__pb2.TransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileSharing.TransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransferService(object):
    """TRANSFER

    """

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileSharing.TransferService/Transfer',
            protobufs_dot_service__pb2.TransferRequest.SerializeToString,
            protobufs_dot_service__pb2.TransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UploadServiceStub(object):
    """UPLOAD

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upload = channel.unary_unary(
                '/fileSharing.UploadService/Upload',
                request_serializer=protobufs_dot_service__pb2.UploadRequest.SerializeToString,
                response_deserializer=protobufs_dot_service__pb2.UploadResponse.FromString,
                )


class UploadServiceServicer(object):
    """UPLOAD

    """

    def Upload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UploadServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upload': grpc.unary_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=protobufs_dot_service__pb2.UploadRequest.FromString,
                    response_serializer=protobufs_dot_service__pb2.UploadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileSharing.UploadService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UploadService(object):
    """UPLOAD

    """

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileSharing.UploadService/Upload',
            protobufs_dot_service__pb2.UploadRequest.SerializeToString,
            protobufs_dot_service__pb2.UploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TableServiceStub(object):
    """TABLE

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Table = channel.unary_unary(
                '/fileSharing.TableService/Table',
                request_serializer=protobufs_dot_service__pb2.TableRequest.SerializeToString,
                response_deserializer=protobufs_dot_service__pb2.TableResponse.FromString,
                )


class TableServiceServicer(object):
    """TABLE

    """

    def Table(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TableServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Table': grpc.unary_unary_rpc_method_handler(
                    servicer.Table,
                    request_deserializer=protobufs_dot_service__pb2.TableRequest.FromString,
                    response_serializer=protobufs_dot_service__pb2.TableResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileSharing.TableService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TableService(object):
    """TABLE

    """

    @staticmethod
    def Table(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileSharing.TableService/Table',
            protobufs_dot_service__pb2.TableRequest.SerializeToString,
            protobufs_dot_service__pb2.TableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PingServiceStub(object):
    """PING

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/fileSharing.PingService/Ping',
                request_serializer=protobufs_dot_service__pb2.PingRequest.SerializeToString,
                response_deserializer=protobufs_dot_service__pb2.PingResponse.FromString,
                )


class PingServiceServicer(object):
    """PING

    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=protobufs_dot_service__pb2.PingRequest.FromString,
                    response_serializer=protobufs_dot_service__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fileSharing.PingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PingService(object):
    """PING

    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fileSharing.PingService/Ping',
            protobufs_dot_service__pb2.PingRequest.SerializeToString,
            protobufs_dot_service__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
